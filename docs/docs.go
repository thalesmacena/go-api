// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/health": {
            "get": {
                "description": "Check the health status of the application and its dependencies",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Health check endpoint",
                "responses": {
                    "200": {
                        "description": "Health status",
                        "schema": {
                            "$ref": "#/definitions/model.HealthResponse"
                        }
                    }
                }
            }
        },
        "/short-url": {
            "get": {
                "description": "Retrieve all short URLs with pagination and optional URL filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "short-url"
                ],
                "summary": "Get all short URLs",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Page size",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "URL part to filter by",
                        "name": "urlPart",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Paginated list of short URLs",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.ShortUrl"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new short URL from the provided URL and expiration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "short-url"
                ],
                "summary": "Create a new short URL",
                "parameters": [
                    {
                        "description": "Short URL creation data",
                        "name": "shortUrl",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateShortUrlDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created short URL",
                        "schema": {
                            "$ref": "#/definitions/entity.ShortUrl"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/short-url/{hash}": {
            "get": {
                "description": "Find a short URL by its hash and redirect to the original URL",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "short-url"
                ],
                "summary": "Get short URL by hash and redirect",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Short URL hash",
                        "name": "hash",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "301": {
                        "description": "Redirect to original URL"
                    },
                    "404": {
                        "description": "Short URL not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Update a short URL's details by its hash",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "short-url"
                ],
                "summary": "Update short URL by hash",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Short URL hash",
                        "name": "hash",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Short URL update data",
                        "name": "shortUrl",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateShortUrlDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated short URL",
                        "schema": {
                            "$ref": "#/definitions/entity.ShortUrl"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a short URL by its hash",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "short-url"
                ],
                "summary": "Delete short URL by hash",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Short URL hash",
                        "name": "hash",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Short URL deleted successfully"
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/weather": {
            "get": {
                "description": "Retrieve all monitored cities with pagination and filtering options",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "weather"
                ],
                "summary": "Get all monitored cities",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Page size",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "City name prefix to filter by",
                        "name": "namePrefix",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "State to filter by",
                        "name": "state",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Date to filter from (YYYY-MM-DD)",
                        "name": "fromDate",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Paginated list of cities",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.City"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new city to the weather monitoring system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "weather"
                ],
                "summary": "Create city monitoring",
                "parameters": [
                    {
                        "description": "City monitoring data",
                        "name": "city",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateCityMonitoringDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "City monitoring created successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body or missing required fields",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/weather/schedule": {
            "get": {
                "description": "Schedule a weather monitoring update for all cities in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "weather"
                ],
                "summary": "Schedule weather update for all cities",
                "responses": {
                    "202": {
                        "description": "Cities monitoring update scheduled successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/weather/state/{state}/city/{city}": {
            "get": {
                "description": "Find a specific city by its name and state with weather data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "weather"
                ],
                "summary": "Get city by name and state",
                "parameters": [
                    {
                        "type": "string",
                        "description": "City name",
                        "name": "city",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "State name",
                        "name": "state",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Date to filter from (YYYY-MM-DD)",
                        "name": "fromDate",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "City data with weather information",
                        "schema": {
                            "$ref": "#/definitions/entity.City"
                        }
                    },
                    "404": {
                        "description": "City not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove a city from the weather monitoring system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "weather"
                ],
                "summary": "Remove city monitoring",
                "parameters": [
                    {
                        "type": "string",
                        "description": "City name",
                        "name": "city",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "State name",
                        "name": "state",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "City monitoring removed successfully"
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "entity.City": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "createdDate": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "updatedDate": {
                    "type": "string"
                },
                "waveConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.WaveCondition"
                    }
                },
                "weatherForecasts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.WeatherForecast"
                    }
                }
            }
        },
        "entity.ShortUrl": {
            "type": "object",
            "properties": {
                "createdDate": {
                    "type": "string"
                },
                "expiration": {
                    "type": "string"
                },
                "hash": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "updatedDate": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "entity.WaveCondition": {
            "type": "object",
            "properties": {
                "agitation": {
                    "type": "string"
                },
                "cityId": {
                    "type": "string"
                },
                "createdDate": {
                    "type": "string"
                },
                "day": {
                    "type": "string"
                },
                "hour": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "updatedDate": {
                    "type": "string"
                },
                "waveDirection": {
                    "type": "string"
                },
                "waveDirectionDescription": {
                    "type": "string"
                },
                "waveHeight": {
                    "type": "number"
                },
                "wind": {
                    "type": "number"
                },
                "windDirection": {
                    "type": "string"
                },
                "windDirectionDescription": {
                    "type": "string"
                }
            }
        },
        "entity.WeatherForecast": {
            "type": "object",
            "properties": {
                "cityId": {
                    "type": "string"
                },
                "condition": {
                    "type": "string"
                },
                "conditionDescription": {
                    "type": "string"
                },
                "createdDate": {
                    "type": "string"
                },
                "day": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "max": {
                    "type": "integer"
                },
                "min": {
                    "type": "integer"
                },
                "ultraVioletIndex": {
                    "type": "integer"
                },
                "updatedDate": {
                    "type": "string"
                }
            }
        },
        "model.ComponentHealthStatus": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "status": {
                    "$ref": "#/definitions/model.HealthStatus"
                }
            }
        },
        "model.CreateCityMonitoringDTO": {
            "type": "object",
            "required": [
                "cityName",
                "state"
            ],
            "properties": {
                "cityName": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                }
            }
        },
        "model.CreateShortUrlDTO": {
            "type": "object",
            "properties": {
                "expiration": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "model.HealthResponse": {
            "type": "object",
            "properties": {
                "database": {
                    "$ref": "#/definitions/model.ComponentHealthStatus"
                },
                "queue": {
                    "$ref": "#/definitions/model.ComponentHealthStatus"
                },
                "status": {
                    "$ref": "#/definitions/model.HealthStatus"
                }
            }
        },
        "model.HealthStatus": {
            "type": "string",
            "enum": [
                "UP",
                "DOWN",
                "UNKNOWN"
            ],
            "x-enum-varnames": [
                "StatusUp",
                "StatusDown",
                "StatusUnknown"
            ]
        },
        "model.UpdateShortUrlDTO": {
            "type": "object",
            "properties": {
                "expiration": {
                    "type": "string"
                },
                "hash": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/go-api",
	Schemes:          []string{"http", "https"},
	Title:            "Go API",
	Description:      "A REST API for URL shortening and weather monitoring services",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
