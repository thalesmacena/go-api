services:
  # PostgreSQL Database
  postgres:
    build:
      context: .
      dockerfile: database.dockerfile
    container_name: go-api-postgres
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - go-api-network

  # LocalStack (AWS services emulator)
  localstack:
    image: localstack/localstack
    container_name: go-api-localstack
    environment:
      - SERVICES=sqs,s3,dynamodb,lambda
      - DEBUG=1
      - DATA_DIR=/var/lib/localstack
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_OUTPUT=json
      - PERSISTENCE=1
    ports:
      - "4566:4566"  # LocalStack main port
      - "4510-4559:4510-4559"  # LocalStack service ports
    volumes:
      - ./opt/ready.d:/etc/localstack/init/ready.d
      - localstack_data:/var/lib/localstack
    networks:
      - go-api-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: go-api-redis
    command: redis-server /usr/local/etc/redis/redis.conf
    environment:
      - REDIS_PASSWORD=redis_password
    ports:
      - "6379:6379"
    volumes:
      - ./opt/redis.conf:/usr/local/etc/redis/redis.conf:ro
    tmpfs:
      - /data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_password", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - go-api-network

  # NGINX Load Balancer
  nginx:
    image: nginx:alpine
    container_name: go-api-nginx
    environment:
      - GO_API_INSTANCES=go-api-1:8081,go-api-2:8082
    ports:
      - "8080:80"
    volumes:
      - ./opt/nginx.conf.template:/etc/nginx/nginx.conf.template:ro
      - ./opt/init-nginx.sh:/init-nginx.sh:ro
    command: ["/bin/sh", "/init-nginx.sh"]
    depends_on:
      - go-api-1
      - go-api-2
    restart: unless-stopped
    networks:
      - go-api-network

  # GO API Application - Instance 1
  go-api-1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: go-api-app-1
    environment:
      # Database configuration
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - DB_DATABASE=postgres
      - DB_SCHEMA=go
      
      # Server configuration
      - SERVER_PORT=8081
      
      # AWS/LocalStack configuration
      - AWS_REGION=us-east-1
      - AWS_ENDPOINT=http://localstack:4566
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_USE_SSL=false
      
      # Redis configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis_password
      - REDIS_DB=0
      
    expose:
      - "8081"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/go-api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - go-api-network

  # GO API Application - Instance 2
  go-api-2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: go-api-app-2
    environment:
      # Database configuration
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - DB_DATABASE=postgres
      - DB_SCHEMA=go
      
      # Server configuration
      - SERVER_PORT=8082
      
      # AWS/LocalStack configuration
      - AWS_REGION=us-east-1
      - AWS_ENDPOINT=http://localstack:4566
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_USE_SSL=false
      
      # Redis configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis_password
      - REDIS_DB=0
   
    expose:
      - "8082"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8082/go-api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - go-api-network

volumes:
  postgres_data:
    driver: local
  localstack_data:
    driver: local

networks:
  go-api-network:
    driver: bridge
